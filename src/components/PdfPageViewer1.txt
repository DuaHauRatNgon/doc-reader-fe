import React, { useState, useEffect } from 'react';
import { Document, Page, pdfjs } from 'react-pdf';
import 'react-pdf/dist/esm/Page/AnnotationLayer.css';
import 'react-pdf/dist/esm/Page/TextLayer.css';

// C·∫•u h√¨nh worker
pdfjs.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.11.174/pdf.worker.min.js';

export default function PdfPageViewer({ base64 }) {
  const [numPages, setNumPages] = useState(null);
  const [pageNumber, setPageNumber] = useState(1);
  const [scale, setScale] = useState(1.0);
  
  const onLoadSuccess = ({ numPages }) => {
    setNumPages(numPages);
  };
  
  const onLoadError = (error) => {
    console.error('Error loading PDF:', error);
  };

  const goToPrevPage = () => {
    setPageNumber(prev => Math.max(prev - 1, 1));
  };

  const goToNextPage = () => {
    setPageNumber(prev => Math.min(prev + 1, numPages || 1));
  };

  const zoomIn = () => {
    setScale(prev => Math.min(prev + 0.2, 3.0));
  };

  const zoomOut = () => {
    setScale(prev => Math.max(prev - 0.2, 0.5));
  };

  const resetZoom = () => {
    setScale(1.0);
  };
  
  return (
    <div style={{ 
      display: 'flex', 
      flexDirection: 'column', 
      height: '100vh',
      backgroundColor: '#f5f5f5'
    }}>
      {/* Header Controls */}
      <div style={{
        padding: '10px 20px',
        backgroundColor: '#333',
        color: 'white',
        display: 'flex',
        justifyContent: 'space-between',
        alignItems: 'center',
        boxShadow: '0 2px 4px rgba(0,0,0,0.1)'
      }}>
        {/* Navigation Controls */}
        <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
          <button 
            onClick={goToPrevPage}
            disabled={pageNumber <= 1}
            style={{
              padding: '8px 16px',
              backgroundColor: pageNumber <= 1 ? '#666' : '#007bff',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: pageNumber <= 1 ? 'not-allowed' : 'pointer',
              fontSize: '14px'
            }}
          >
            ‚Üê Trang tr∆∞·ªõc
          </button>
          
          <span style={{
            padding: '8px 16px',
            backgroundColor: '#555',
            borderRadius: '4px',
            fontSize: '14px',
            minWidth: '120px',
            textAlign: 'center'
          }}>
            {numPages ? `${pageNumber} / ${numPages}` : 'ƒêang t·∫£i...'}
          </span>
          
          <button 
            onClick={goToNextPage}
            disabled={pageNumber >= (numPages || 1)}
            style={{
              padding: '8px 16px',
              backgroundColor: pageNumber >= (numPages || 1) ? '#666' : '#007bff',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: pageNumber >= (numPages || 1) ? 'not-allowed' : 'pointer',
              fontSize: '14px'
            }}
          >
            Trang sau ‚Üí
          </button>
        </div>

        {/* Zoom Controls */}
        <div style={{ display: 'flex', alignItems: 'center', gap: '10px' }}>
          <button 
            onClick={zoomOut}
            style={{
              padding: '6px 12px',
              backgroundColor: '#28a745',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: 'pointer',
              fontSize: '16px'
            }}
          >
            ‚àí
          </button>
          
          <span style={{
            padding: '6px 12px',
            backgroundColor: '#555',
            borderRadius: '4px',
            fontSize: '14px',
            minWidth: '60px',
            textAlign: 'center'
          }}>
            {Math.round(scale * 100)}%
          </span>
          
          <button 
            onClick={zoomIn}
            style={{
              padding: '6px 12px',
              backgroundColor: '#28a745',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: 'pointer',
              fontSize: '16px'
            }}
          >
            +
          </button>
          
          <button 
            onClick={resetZoom}
            style={{
              padding: '6px 12px',
              backgroundColor: '#6c757d',
              color: 'white',
              border: 'none',
              borderRadius: '4px',
              cursor: 'pointer',
              fontSize: '12px'
            }}
          >
            Reset
          </button>
        </div>
      </div>

      {/* PDF Viewer Area */}
      <div style={{
        flex: 1,
        display: 'flex',
        justifyContent: 'center',
        alignItems: 'center',
        overflow: 'auto',
        padding: '20px',
        backgroundColor: '#e9ecef'
      }}>
        <div style={{
          backgroundColor: 'white',
          boxShadow: '0 4px 8px rgba(0,0,0,0.1)',
          borderRadius: '8px',
          padding: '10px',
          maxWidth: '100%',
          maxHeight: '100%',
          overflow: 'auto'
        }}>
          <Document
            file={`data:application/pdf;base64,${base64}`}
            onLoadSuccess={onLoadSuccess}
            onLoadError={onLoadError}
            loading={
              <div style={{
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                height: '400px',
                fontSize: '18px',
                color: '#666'
              }}>
                üìÑ ƒêang t·∫£i PDF...
              </div>
            }
            error={
              <div style={{
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                height: '400px',
                fontSize: '18px',
                color: '#dc3545'
              }}>
                ‚ùå L·ªói khi t·∫£i PDF
              </div>
            }
          >
            <Page 
              pageNumber={pageNumber}
              scale={scale}
              renderTextLayer={false}
              renderAnnotationLayer={false}
              loading={
                <div style={{
                  display: 'flex',
                  justifyContent: 'center',
                  alignItems: 'center',
                  height: '400px',
                  fontSize: '16px',
                  color: '#666'
                }}>
                  ‚è≥ ƒêang t·∫£i trang...
                </div>
              }
            />
          </Document>
        </div>
      </div>

      {/* Footer - Keyboard Shortcuts Info */}
      <div style={{
        padding: '8px 20px',
        backgroundColor: '#f8f9fa',
        borderTop: '1px solid #dee2e6',
        fontSize: '12px',
        color: '#666',
        textAlign: 'center'
      }}>
        Ph√≠m t·∫Øt: ‚Üê ‚Üí (chuy·ªÉn trang) | + - (zoom) | 0 (reset zoom)
      </div>

      {/* Keyboard Navigation */}
      <div style={{ display: 'none' }}>
        {typeof window !== 'undefined' && (
          <KeyboardHandler 
            onPrevPage={goToPrevPage}
            onNextPage={goToNextPage}
            onZoomIn={zoomIn}
            onZoomOut={zoomOut}
            onResetZoom={resetZoom}
            canGoPrev={pageNumber > 1}
            canGoNext={pageNumber < (numPages || 1)}
          />
        )}
      </div>
    </div>
  );
}

// Component x·ª≠ l√Ω ph√≠m t·∫Øt
function KeyboardHandler({ onPrevPage, onNextPage, onZoomIn, onZoomOut, onResetZoom, canGoPrev, canGoNext }) {
  useEffect(() => {
    const handleKeyPress = (event) => {
      switch(event.key) {
        case 'ArrowLeft':
          if (canGoPrev) onPrevPage();
          break;
        case 'ArrowRight':
          if (canGoNext) onNextPage();
          break;
        case '+':
        case '=':
          onZoomIn();
          break;
        case '-':
          onZoomOut();
          break;
        case '0':
          onResetZoom();
          break;
        default:
          break;
      }
    };

    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [onPrevPage, onNextPage, onZoomIn, onZoomOut, onResetZoom, canGoPrev, canGoNext]);

  return null;
}